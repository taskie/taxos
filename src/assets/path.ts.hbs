import * as axios from "axios";
{{#each tsRefs}}
import {{{ @key }}} from "{{{ this }}}";
{{/each}}

{{#each endpoints}}
  export interface {{capitalizedMethod}}Params {
    {{#each structuredParameters}}
      {{{@key}}}: { {{#each this}}
        {{#if description}}/** {{ description }} */{{/if}}
        {{{name}}}{{#unless required}}?{{/unless}}: {{{tsType}}};
      {{/each}} };
    {{/each}}
    {{#if data}}
      data{{#unless data.required}}?{{/unless}}: {{{data.tsType}}};
    {{/if}}
  }

  export type {{capitalizedMethod}}Response =
  {{#each responses}}
  | {
    {{#unless default}}
    {{#if description}}/** {{ description }} */{{/if}}
    status: {{{ @key }}},
    {{/unless}}
    data: {{{ tsType }}},
    rawResponse: axios.AxiosResponse,
  }
  {{/each}}

  export const generate{{{capitalizedMethod}}}Config = (params: {{{capitalizedMethod}}}Params): axios.AxiosRequestConfig => ({
    headers: {
      {{#if structuredParameters.header}}headers: params.header,{{/if}}
      {{#if consumes}}"content-type": "{{{ consumes.[0] }}}",{{/if}}
      {{#if produces}}accept: "{{#each produces}}{{{ this }}}{{#unless @last}}, {{/unless}}{{/each}}",{{/if}}
      {{#if configCode}}...{{{ configCode }}},{{/if}}
    }
  });

  {{#if description}}/** {{ description }} */{{/if}}
  export const {{methodSafe}} = (params: {{{capitalizedMethod}}}Params, config: axios.AxiosRequestConfig = {}, client: axios.AxiosInstance = apiContext.defaultClient): Promise<{{{capitalizedMethod}}}Response> =>
    apiContext.request({{{ pathCode }}}, "{{method}}", {{{ dataCode }}}, { ...generate{{{capitalizedMethod}}}Config(params), ...config }, client);

{{/each}}